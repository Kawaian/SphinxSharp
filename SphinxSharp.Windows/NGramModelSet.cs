//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pocketsphinx {

public class NGramModelSet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NGramModelSet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NGramModelSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NGramModelSet() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          sphinxbasePINVOKE.delete_NGramModelSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public NGramModelSetIterator __iter__() {
    global::System.IntPtr cPtr = sphinxbasePINVOKE.NGramModelSet___iter__(swigCPtr);
    NGramModelSetIterator ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModelSetIterator(cPtr, true);
    return ret;
  }

  public NGramModelSet(Config config, LogMath logmath, string path) : this(sphinxbasePINVOKE.new_NGramModelSet(Config.getCPtr(config), LogMath.getCPtr(logmath), path), true) {
  }

  public int count() {
    int ret = sphinxbasePINVOKE.NGramModelSet_count(swigCPtr);
    return ret;
  }

  public NGramModel add(NGramModel model, string name, float weight, bool reuse_widmap) {
    global::System.IntPtr cPtr = sphinxbasePINVOKE.NGramModelSet_add(swigCPtr, NGramModel.getCPtr(model), name, weight, reuse_widmap);
    NGramModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModel(cPtr, false);
    return ret;
  }

  public NGramModel select(string name) {
    global::System.IntPtr cPtr = sphinxbasePINVOKE.NGramModelSet_select(swigCPtr, name);
    NGramModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModel(cPtr, false);
    return ret;
  }

  public NGramModel lookup(string name) {
    global::System.IntPtr cPtr = sphinxbasePINVOKE.NGramModelSet_lookup(swigCPtr, name);
    NGramModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModel(cPtr, false);
    return ret;
  }

  public string current() {
    string ret = sphinxbasePINVOKE.NGramModelSet_current(swigCPtr);
    return ret;
  }

}

}
