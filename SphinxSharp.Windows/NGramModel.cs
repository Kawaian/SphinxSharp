//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pocketsphinx {

public class NGramModel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NGramModel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NGramModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NGramModel() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          sphinxbasePINVOKE.delete_NGramModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static NGramModel fromIter(SWIGTYPE_p_ngram_model_set_iter_t itor) {
    global::System.IntPtr cPtr = sphinxbasePINVOKE.NGramModel_fromIter(SWIGTYPE_p_ngram_model_set_iter_t.getCPtr(itor));
    NGramModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModel(cPtr, false);
    return ret;
  }

  public NGramModel(string path) : this(sphinxbasePINVOKE.new_NGramModel__SWIG_0(path), true) {
  }

  public NGramModel(Config config, LogMath logmath, string path) : this(sphinxbasePINVOKE.new_NGramModel__SWIG_1(Config.getCPtr(config), LogMath.getCPtr(logmath), path), true) {
  }

  public void write(string path, SWIGTYPE_p_ngram_file_type_t ftype) {
    sphinxbasePINVOKE.NGramModel_write(swigCPtr, path, SWIGTYPE_p_ngram_file_type_t.getCPtr(ftype));
    if (sphinxbasePINVOKE.SWIGPendingException.Pending) throw sphinxbasePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ngram_file_type_t str_to_type(string str) {
    SWIGTYPE_p_ngram_file_type_t ret = new SWIGTYPE_p_ngram_file_type_t(sphinxbasePINVOKE.NGramModel_str_to_type(swigCPtr, str), true);
    return ret;
  }

  public string type_to_str(int type) {
    string ret = sphinxbasePINVOKE.NGramModel_type_to_str(swigCPtr, type);
    return ret;
  }

  public void casefold(int kase) {
    sphinxbasePINVOKE.NGramModel_casefold(swigCPtr, kase);
  }

  public int size() {
    int ret = sphinxbasePINVOKE.NGramModel_size(swigCPtr);
    return ret;
  }

  public int add_word(string word, SWIGTYPE_p_float32 weight) {
    int ret = sphinxbasePINVOKE.NGramModel_add_word(swigCPtr, word, SWIGTYPE_p_float32.getCPtr(weight));
    if (sphinxbasePINVOKE.SWIGPendingException.Pending) throw sphinxbasePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int prob(uint n, SWIGTYPE_p_p_char ptr) {
    int ret = sphinxbasePINVOKE.NGramModel_prob(swigCPtr, n, SWIGTYPE_p_p_char.getCPtr(ptr));
    return ret;
  }

}

}
